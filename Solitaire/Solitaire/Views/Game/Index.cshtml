@using System.Linq
@using Solitaire.Models.models
@model GameViewModel
@{
    ViewData["Title"] = "Solitaire";
}

<div class="container">
    <h1>Solitaire</h1>

    <div class="row mb-4">
        <div class="col-md-12">
            <button id="newGame" class="btn btn-primary">New Game</button>
            <button id="drawCard" class="btn btn-success">Draw Card</button>
            <span id="gameStatus" class="ml-3"></span>
        </div>
    </div>

    <!-- Stock and Waste -->
    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card-area">
                <h5>Stock: @Model.StockCount</h5>
                <div class="card-slot stock" onclick="drawFromStock()">
                    @if (Model.StockCount > 0)
                    {
                        <div class="card back">🂠</div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card-area">
                <h5>Waste</h5>
                <div class="card-slot waste" onclick="selectWaste()">
                    @if (Model.Waste.Count > 0)
                    {
                        var topCard = Model.Waste[Model.Waste.Count - 1];
                        <div class="card front @topCard.Suit waste-card"
                             data-rank="@topCard.Rank" data-suit="@topCard.Suit"
                             onclick="selectWaste()">
                            @GetRankSymbol(topCard.Rank)@GetSuitSymbol(topCard.Suit)
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card-area">
                <h5>Foundations</h5>
                <div class="foundations">
                    @foreach (var foundation in Model.Foundations)
                    {
                        <div class="card-slot foundation" data-suit="@foundation.Key" onclick="moveToFoundation('@foundation.Key')">
                            @if (foundation.Value.Count > 0)
                            {
                                var topCard = foundation.Value[foundation.Value.Count - 1];
                                <div class="card front @topCard.Suit" data-rank="@topCard.Rank" data-suit="@topCard.Suit">
                                    @GetRankSymbol(topCard.Rank)@GetSuitSymbol(topCard.Suit)
                                </div>
                            }
                            else
                            {
                                <div class="empty-foundation">@foundation.Key[0]</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Tableau -->
    <div class="row">
        <div class="col-md-12">
            <div class="tableau">
                @for (int i = 0; i < Model.Tableau.Count; i++)
                {
                    <div class="tableau-column" data-column="@i" onclick="moveToTableau(@i)">
                        @{
                            var column = Model.Tableau[i];
                            var cardIndex = 0;
                        }
                        @foreach (var card in column)
                        {
                            <div class="card @(card.IsFaceUp ? "front " + card.Suit : "back")"
                                 data-rank="@card.Rank" data-suit="@card.Suit"
                                 data-column="@i" data-index="@cardIndex"
                                 onclick="handleCardClick(this, @i, @cardIndex, event)"
                                 ondblclick="autoMoveToFoundation(this, @i, @cardIndex)">
                                @if (card.IsFaceUp)
                                {
                                    @GetRankSymbol(card.Rank)

                                    @GetSuitSymbol(card.Suit)
                                }
                                else
                                {
                                    @:🂠
                                }
                            </div>
                            cardIndex++;
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card-slot {
            width: 100px;
            height: 140px;
            border: 2px dashed #ccc;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 5px;
            cursor: pointer;
            transition: all 0.2s;
        }

            .card-slot:hover {
                border-color: #007bff;
                background-color: rgba(0, 123, 255, 0.1);
            }

        .card {
            width: 100px;
            height: 140px;
            border: 1px solid #000;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-bottom: -120px; /* Overlap cards */
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            z-index: 1;
        }

            .card:hover {
                transform: translateY(-5px);
                z-index: 10;
            }

            .card.selected {
                box-shadow: 0 0 0 3px yellow;
                transform: scale(1.05);
                z-index: 20;
            }

            .card.back {
                background: linear-gradient(45deg, #1a6a1a, #2d8a2d);
                color: white;
            }

            .card.front {
                background: white;
                color: black;
                box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
            }

        .hearts, .diamonds {
            color: red;
        }

        .clubs, .spades {
            color: black;
        }

        .tableau {
            display: flex;
            gap: 20px;
        }

        .tableau-column {
            min-width: 100px;
            padding-top: 20px;
        }

        .foundations {
            display: flex;
            gap: 10px;
        }

        .empty-foundation {
            font-size: 18px;
            color: #666;
            font-weight: bold;
        }

        #gameStatus {
            font-weight: bold;
            font-size: 18px;
        }
    </style>
}

@section Scripts {
    <script>
        let selectedCard = null;
        let selectedWaste = false;

        function drawFromStock() {
            $.post('@Url.Action("MakeMove", "Game")', {
                moveType: 'draw'
            }, function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert('Cannot draw card: ' + (response.error || 'Unknown error'));
                }
            }).fail(function() {
                alert('Error drawing card');
            });
        }

        function handleCardClick(cardElement, columnIndex, cardIndex, event) {
            event.stopPropagation(); // Prevent column click

            const card = $(cardElement);
            if (card.hasClass('back')) {
                return; // Can't select face-down cards
            }

            // Remove previous selection
            $('.card.selected').removeClass('selected');
            selectedWaste = false;

            // Select new card
            card.addClass('selected');
            selectedCard = {
                element: cardElement,
                column: columnIndex,
                index: cardIndex
            };

            console.log('Selected card:', selectedCard);
        }

        function selectWaste() {
            if ($('.waste-card').length === 0) return;

            // Remove previous selection
            $('.card.selected').removeClass('selected');

            // Select waste
            $('.waste-card').addClass('selected');
            selectedCard = null;
            selectedWaste = true;

            console.log('Selected waste card');
        }

        function moveToFoundation(suit) {
            let moveData = {};

            if (selectedWaste) {
                moveData = {
                    moveType: 'waste_to_foundation',
                    foundationSuit: suit
                };
            } else if (selectedCard) {
                moveData = {
                    moveType: 'tableau_to_foundation',
                    foundationSuit: suit,
                    fromColumn: selectedCard.column,
                    cardIndex: selectedCard.index
                };
            } else {
                alert('Please select a card first');
                return;
            }

            $.post('@Url.Action("MakeMove", "Game")', moveData, function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert('Cannot move to foundation: ' + (response.error || 'Invalid move'));
                }
            }).fail(function() {
                alert('Error moving card');
            });
        }

        function moveToTableau(columnIndex) {
            let moveData = {};

            if (selectedWaste) {
                moveData = {
                    moveType: 'waste_to_tableau',
                    toColumn: columnIndex
                };
            } else if (selectedCard) {
                if (selectedCard.column === columnIndex) {
                    alert('Cannot move to same column');
                    return;
                }

                moveData = {
                    moveType: 'tableau_to_tableau',
                    fromColumn: selectedCard.column,
                    toColumn: columnIndex,
                    cardIndex: selectedCard.index
                };
            } else {
                alert('Please select a card first');
                return;
            }

            $.post('@Url.Action("MakeMove", "Game")', moveData, function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert('Invalid move: ' + (response.error || 'Cannot move card'));
                }
            }).fail(function() {
                alert('Error moving card');
            });
        }

        function autoMoveToFoundation(cardElement, columnIndex, cardIndex) {
            // Select the card first
            handleCardClick(cardElement, columnIndex, cardIndex, { stopPropagation: function() {} });

            // Try each foundation
            const suits = ['hearts', 'diamonds', 'clubs', 'spades'];
            let moved = false;

            // We'll try one foundation - the logic will handle checking which one works
            if (selectedCard) {
                $.post('@Url.Action("MakeMove", "Game")', {
                    moveType: 'tableau_to_foundation',
                    foundationSuit: suits[0], // Try first suit
                    fromColumn: selectedCard.column,
                    cardIndex: selectedCard.index
                }, function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        // If first suit fails, try others
                        tryOtherFoundations(suits.slice(1), columnIndex, cardIndex);
                    }
                });
            }
        }

        function tryOtherFoundations(remainingSuits, columnIndex, cardIndex) {
            if (remainingSuits.length === 0) {
                alert('Cannot auto-move to any foundation');
                return;
            }

            const suit = remainingSuits[0];
            $.post('@Url.Action("MakeMove", "Game")', {
                moveType: 'tableau_to_foundation',
                foundationSuit: suit,
                fromColumn: columnIndex,
                cardIndex: cardIndex
            }, function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    tryOtherFoundations(remainingSuits.slice(1), columnIndex, cardIndex);
                }
            });
        }

        // Clear selection when clicking outside
        $(document).click(function() {
            $('.card.selected').removeClass('selected');
            selectedCard = null;
            selectedWaste = false;
        });

        // Prevent card clicks from triggering document click
        $('.card').click(function(event) {
            event.stopPropagation();
        });

        $(document).ready(function() {
            $('#newGame').click(function() {
                $.post('@Url.Action("NewGame", "Game")', function(response) {
                    if (response.success) {
                        location.reload();
                    }
                });
            });

            $('#drawCard').click(drawFromStock);

            // Game status
        @if (Model.IsGameWon)
        {
            <text>
                    $('#gameStatus').html('<span class="text-success">🎉 You Won!</span>');
                    setTimeout(() => {
                        if (confirm('Congratulations! You won the game! Start a new game?')) {
                            $.post('@Url.Action("NewGame", "Game")', function() {
                                location.reload();
                            });
                        }
                    }, 500);
            </text>
        }

            // Add keyboard shortcuts
            $(document).keypress(function(e) {
                if (e.which === 100 || e.which === 68) { // 'd' or 'D'
                    drawFromStock();
                } else if (e.which === 110 || e.which === 78) { // 'n' or 'N'
                    $('#newGame').click();
                }
            });

            console.log('Game loaded - How to play:');
            console.log('1. Click on face-up cards to select them');
            console.log('2. Click on foundation piles to move selected card there');
            console.log('3. Click on tableau columns to move selected card there');
            console.log('4. Double-click cards to try auto-moving to foundation');
            console.log('5. Press D to draw, N for new game');
        });
    </script>
}

@functions {
    private string GetRankSymbol(int rank)
    {
        var symbols = new Dictionary<int, string>
        {
            {1, "A"}, {11, "J"}, {12, "Q"}, {13, "K"}
        };
        return symbols.ContainsKey(rank) ? symbols[rank] : rank.ToString();
    }

    private string GetSuitSymbol(string suit)
    {
        var symbols = new Dictionary<string, string>
        {
            {"hearts", "♥"}, {"diamonds", "♦"}, {"clubs", "♣"}, {"spades", "♠"}
        };
        return symbols.ContainsKey(suit.ToLower()) ? symbols[suit.ToLower()] : suit[0].ToString().ToUpper();
    }
}